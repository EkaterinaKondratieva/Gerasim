import sqlite3
import telebot
from telebot import types
import pymorphy2
import requests

from seeds import SEEDS

bot = telebot.TeleBot('7190036484:AAG1KC_QhMtZLDPopV3gW6ELKpvFlhrcvGo')
morph = pymorphy2.MorphAnalyzer()
about_seed = []
BASE_URL = 'https://api.openweathermap.org/data/2.5/forecast?'
API_KEY_WEATHER = 'a7cd0d9a75754013bea6553cc27adc54'
API_KEY_MAP = "40d1649f-0493-4b70-98ba-98533de7710b"


@bot.message_handler(commands=['start', 'help'])
def start(message):
    bot.send_photo(message.chat.id, photo=open(f'photoes/gerasim.jpeg', 'rb'))
    marcup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    marcup.add(types.KeyboardButton('–í –≥–æ—Å—Ç—è—Ö —É –ë–∞–±—ã –ù—é—Ä—ã'))
    marcup.add(types.KeyboardButton('–í —à–∞—à–ª—ã—á–Ω–æ–π —É –ê—à–æ—Ç–∞'))
    marcup.add(types.KeyboardButton('–ò–≥—Ä—ã –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ'))
    bot.send_message(message.chat.id,
                     f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –í–∏–¥–∏—à—å –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É?\n–î–∞–≤–∞–π –æ–±—ä—è—Å–Ω—é, –æ —á—ë–º —ç—Ç–∏ —Ä–∞–∑–¥–µ–ª—ã: '
                     f'\nüå∏ ¬´–í –≥–æ—Å—Ç—è—Ö —É –ë–∞–±—ã –ù—é—Ä—ã¬ª - —Å–æ–≤–µ—Ç—ã –æ –ø–æ—Å–∞–¥–∫–∞—Ö —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä '
                     f'\nü•© ¬´–í —à–∞—à–ª—ã—á–Ω–æ–π —É –ê—à–æ—Ç–∞¬ª - –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ —à–∞—à–ª—ã–∫–µ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –≤ –ø–æ–∏—Å–∫–µ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞ '
                     f'\n‚öΩÔ∏è ¬´–ò–≥—Ä—ã –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ¬ª - –∏–¥–µ–∏ –¥–ª—è –æ—Ç–¥—ã—Ö–∞: –∫–∞–∫ –∑–∞–Ω—è—Ç—å –≤—Å—é –∫–æ–º–ø–∞–Ω–∏—é –∏ –Ω–µ –∑–∞—Å–∫—É—á–∞—Ç—å',
                     parse_mode='html', reply_markup=marcup)


@bot.message_handler(content_types=['text'])
def on_click(message):
    if message.text.lower() == '–≤ –≥–æ—Å—Ç—è—Ö —É –±–∞–±—ã –Ω—é—Ä—ã':
        start_nura(message)
    elif message.text.lower() == '–≤ —à–∞—à–ª—ã—á–Ω–æ–π —É –∞—à–æ—Ç–∞':
        greeting(message)
    elif message.text.lower() == '–∏–≥—Ä—ã –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ':
        games(message)
    elif message.text.lower() == '–∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é':
        menu(message)
    elif message.text.lower() == '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–≤–µ—Ç—ã':
        answer(message)
    elif message.text.lower() == '–≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É':
        only_buttons(message)
    elif requests.get(
            f"http://geocode-maps.yandex.ru/1.x/?apikey=40d1649f-0493-4b70-98ba-98533de7710b&geocode={message.text}&format=json"):
        json_response = requests.get(
            f"http://geocode-maps.yandex.ru/1.x/?apikey=40d1649f-0493-4b70-98ba-98533de7710b&geocode={message.text}&format=json").json()
        toponym = json_response["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"]
        toponym_address = toponym["metaDataProperty"]["GeocoderMetaData"]["text"]
        toponym_coodrinates = toponym["Point"]["pos"].split()
        latitude = toponym_coodrinates[1]
        longitude = toponym_coodrinates[0]
        con = sqlite3.connect('bd.sql')
        cur = con.cursor()
        cur.execute('''INSERT INTO user (id, addres, latitude, longitude) VALUES (?, ?, ?, ?)''',
                    (message.from_user.id, toponym_address, latitude, longitude))
        con.commit()
        answer_weather(message, latitude, longitude)


def menu(message):
    marcup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    marcup.add(types.KeyboardButton('–í –≥–æ—Å—Ç—è—Ö —É –ë–∞–±—ã –ù—é—Ä—ã'))
    marcup.add(types.KeyboardButton('–í —à–∞—à–ª—ã—á–Ω–æ–π —É –ê—à–æ—Ç–∞'))
    marcup.add(types.KeyboardButton('–ò–≥—Ä—ã –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ'))
    bot.send_message(message.chat.id, '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º', reply_markup=marcup)


@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    global about_seed
    global k
    bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id)
    if callback.data == 'return' or callback.data == 'return no message':
        marcup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        marcup.add(types.KeyboardButton('–í –≥–æ—Å—Ç—è—Ö —É –ë–∞–±—ã –ù—é—Ä—ã'))
        marcup.add(types.KeyboardButton('–í —à–∞—à–ª—ã—á–Ω–æ–π —É –ê—à–æ—Ç–∞'))
        marcup.add(types.KeyboardButton('–ò–≥—Ä—ã –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ'))
        bot.send_message(callback.message.chat.id, '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º', reply_markup=marcup)
        bot.register_next_step_handler(callback.message, on_click)
    elif callback.data == 'return_to_list':
        only_buttons(callback.message)
    elif callback.data in ['tomatoes', 'cucumbers', 'peppers', 'zucchini', 'carrot', 'strawberry']:
        con = sqlite3.connect('bd.sql')
        cur = con.cursor()
        sort_of_seed = SEEDS[callback.data]
        about_seed_temp = cur.execute('''SELECT Information FROM Seeds WHERE Name = ?''', (sort_of_seed,)).fetchone()[
            0].split('-')
        best_temp = [int(about_seed_temp[0]), int(about_seed_temp[-1])]
        about_seed = []
        about_seed.append(callback.data)
        about_seed.append(sort_of_seed)
        about_seed.append(best_temp)
        adresses_user = list(set(cur.execute('''SELECT addres FROM user WHERE id = ?''',
                                             (callback.message.chat.id,)).fetchall()))
        marcup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        if adresses_user == []:
            text = '–í–Ω—É—á–æ–∫, —á—Ç–æ–±—ã –º–æ—è –ø–æ–º–æ—â—å –±—ã–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π, –º–Ω–µ –Ω—É–∂–Ω–∞ —Ç–≤–æ—è –ª–æ–∫–∞—Ü–∏—è (–ì–æ—Ä–æ–¥, —É–ª–∏—Ü–∞), –Ω–∞–ø—Ä–∏–º–µ—Ä: ' \
                   '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç'
        else:
            text = '–¢—ã —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –º–æ–µ–π –ø–æ–º–æ—â—å—é –∏ —É –º–µ–Ω—è –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã, –≥–¥–µ —Ç—ã –º–æ–≥ –±—ã–≤–∞—Ç—å. \n' \
                   '–ù–æ —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å'
            for adr in adresses_user:
                marcup.add(types.KeyboardButton(adr[0]))

        marcup.row(types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–≤–µ—Ç—ã'))
        marcup.row(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É'), types.KeyboardButton('–ö –Ω–∞—á–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é'))
        bot.send_message(callback.message.chat.id, text, reply_markup=marcup)
    elif callback.data == 'return_to_games':
        bot.send_message(callback.message.chat.id, '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º', reply_markup=create_buttons_for_game())
    elif callback.data == 'two' or callback.data == 'three and more' or callback.data == 'big company':
        n = 2
        if callback.data == 'two':
            n = 2
        elif callback.data == 'three and more':
            n = 3
        elif callback.data == 'big company':
            n = 7
        marcup = types.InlineKeyboardMarkup()
        marcup.add(types.InlineKeyboardButton('–ö –Ω–∞—á–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é', callback_data='return'))
        marcup.add(types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é', callback_data='return_to_games'))
        con = sqlite3.connect('bd.sql')
        cur = con.cursor()
        games_in_bd = cur.execute('''SELECT Game, link, emoji FROM Games WHERE number_of_people = ?''', (n,)).fetchall()
        text = '–í–æ—Ç –≤ —Ç–∞–∫–∏–µ –∏–≥—Ä—ã –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∏–≥—Ä–∞—Ç—å:'
        for i in range(len(games_in_bd)):
            text += f'\n{games_in_bd[i][2]} {games_in_bd[i][0]} {games_in_bd[i][1]}'
        bot.send_message(callback.message.chat.id, text, reply_markup=marcup, parse_mode='html')
    elif callback.data == 'lets go':
        k = 0
        shashlik(callback.message, k)
    elif callback.data == 'forward':
        k += 1
        shashlik(callback.message, k)


def create_buttons_for_game():
    mupcup = types.InlineKeyboardMarkup()
    mupcup.add(types.InlineKeyboardButton('2 —á–µ–ª–æ–≤–µ–∫–∞', callback_data='two'))
    mupcup.add(types.InlineKeyboardButton('3-6 —á–µ–ª–æ–≤–µ–∫', callback_data='three and more'))
    mupcup.add(types.InlineKeyboardButton('–ë–æ–ª—å—à–∞—è –∫–æ–º–ø–∞–Ω–∏—è', callback_data='big company'))
    mupcup.add(types.InlineKeyboardButton('–ö –Ω–∞—á–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é', callback_data='return'))
    return mupcup


def create_buttons_for_nura():
    mupcup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–ü–æ–º–∏–¥–æ—Ä—ãüçÖ', callback_data='tomatoes')
    btn2 = types.InlineKeyboardButton('–û–≥—É—Ä—Ü—ãü•í', callback_data='cucumbers')
    btn3 = types.InlineKeyboardButton('–ü–µ—Ä—Ü—ãü´ë', callback_data='peppers')
    btn4 = types.InlineKeyboardButton('–ö–∞–±–∞—á–∫–∏ü§Æ', callback_data='zucchini')
    btn5 = types.InlineKeyboardButton('–ú–æ—Ä–∫–æ–≤—åü•ï', callback_data='carrot')
    btn6 = types.InlineKeyboardButton('–ö–ª—É–±–Ω–∏–∫–∞üçì', callback_data='strawberry')
    btn7 = types.InlineKeyboardButton('–ö –Ω–∞—á–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é', callback_data='return')
    mupcup.row(btn1, btn2)
    mupcup.row(btn3, btn4)
    mupcup.row(btn5, btn6)
    mupcup.add(btn7)
    return mupcup


def only_buttons(message):
    bot.send_message(message.chat.id, '–ê –≤–æ—Ç –∏ —Å–ø–∏—Å–æ–∫', reply_markup=create_buttons_for_nura())


def answer(message):
    bot.send_message(message.chat.id, '–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø–æ—Å–∞–¥–∫–∏:',
                     reply_markup=types.ReplyKeyboardRemove())
    bot.send_photo(message.chat.id, photo=open(f'vegetables/{about_seed[0]}.jpeg', 'rb'))
    mupcup = types.InlineKeyboardMarkup()
    con = sqlite3.connect('bd.sql')
    cur = con.cursor()
    links_for_plant = cur.execute('''SELECT name, link FROM links WHERE plant = ?''', (about_seed[1],)).fetchall()
    for i in range(len(links_for_plant)):
        mupcup.add(
            types.InlineKeyboardButton(f'{links_for_plant[i][0]}', url=links_for_plant[i][1]))
    mupcup.add(types.InlineKeyboardButton('–ö –Ω–∞—á–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é', callback_data='return'))
    mupcup.add(types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É', callback_data='return_to_list'))
    bot.send_message(message.chat.id, '–ê —ç—Ç–æ –º–æ–∏ –ª—É—á—à–∏–µ —Å–µ–º–µ–Ω–∞)', reply_markup=mupcup)


def start_nura(message):
    bot.send_photo(message.chat.id, photo=open(f'photoes/nura.jpeg', 'rb'), reply_markup=types.ReplyKeyboardRemove())
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, –≤–Ω—É—á–æ–∫! \n'
                                      '–ú–µ–Ω—è –∑–æ–≤—É—Ç –ë–∞–±–∞ –ù—é—Ä–∞ –∏ —è –∑–Ω–∞—é –≤—Å–µ –æ –ø–æ–º–∏–¥–æ—Ä–∫–∞—Ö –∏ –∫–ª—É–±–Ω–∏–∫–µ!\n'
                                      '–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –º–æ—è –ø–æ–º–æ—â—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—É—é –∫—É–ª—å—Ç—É—Ä—É',
                     reply_markup=create_buttons_for_nura())


def answer_weather(message, latitude, longtitude):
    lat = latitude
    lon = longtitude
    url = BASE_URL + 'lat=' + str(lat) + '&lon=' + str(
        lon) + '&appid=' + API_KEY_WEATHER + '&units=metric'
    response = requests.get(url).json()
    now_temp = 0
    cnt = len((response['list']))
    ok = True
    for i in range(cnt):
        if about_seed[2][0] < response['list'][i]['main']['temp'] < about_seed[2][1]:
            now_temp += response['list'][i]['main']['temp']
        elif response['list'][i]['main']['temp'] > about_seed[2][1]:
            ok = 'hot'
            break
        elif response['list'][i]['main']['temp'] < about_seed[2][0]:
            ok = 'cold'
            break
    seed = morph.parse(about_seed[1].lower())[0].inflect({"accs"}).word
    answer(message)
    if ok == True:
        now_temp /= cnt
        if about_seed[-1][0] <= now_temp <= about_seed[-1][-1]:
            bot.send_message(message.chat.id,
                             f'‚òÄÔ∏è<b>{now_temp} - —Ö–æ—Ä–æ—à–∞—è –ø–æ–≥–æ–¥–∞, —á—Ç–æ–±—ã –ø–æ—Å–∞–¥–∏—Ç—å {seed}</b>', parse_mode='html')
        else:
            bot.send_message(message.chat.id, f'<b>–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ –Ω–µ–¥–µ–ª–µ - {now_temp}, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ–ø–ª–æ.'
                                              f'–ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å, —á—Ç–æ–±—ã –ø–æ—Å–∞–¥–∏—Ç—å {seed}</b>', parse_mode='html')
    elif ok == 'cold':
        data = response['list'][i]['dt_txt'].split()[0].split('-')
        bot.send_message(message.chat.id,
                         f'‚ùÑÔ∏è<b>{data[2]}.{data[1]} –æ–∂–∏–¥–∞–µ—Ç—Å—è –Ω–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - {response["list"][i]["main"]["temp"]}.'
                         f' –ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å, —á—Ç–æ–±—ã –ø–æ—Å–∞–¥–∏—Ç—å {seed}</b>', parse_mode='html')
    elif ok == 'hot':
        data = response['list'][i]['dt_txt'].split()[0].split('-')
        bot.send_message(message.chat.id,
                         f'üî•Ô∏è<b>{data[2]}.{data[1]} –æ–∂–∏–¥–∞–µ—Ç—Å—è –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - {response["list"]["main"]["temp"]}.'
                         f' –ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å, —á—Ç–æ–±—ã –ø–æ—Å–∞–¥–∏—Ç—å {seed}</b>', parse_mode='html')


##ASHOT
def greeting(message):
    mupcup = types.InlineKeyboardMarkup()
    mupcup.add(types.InlineKeyboardButton('–ü–æ–µ—Ö–∞–ª–∏', callback_data='lets go'))
    mupcup.add(types.InlineKeyboardButton('–ö –Ω–∞—á–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é', callback_data='return'))
    bot.send_photo(message.chat.id, photo=open(f'photoes/ashot.jpeg', 'rb'), reply_markup=types.ReplyKeyboardRemove())
    bot.send_message(message.chat.id, '–í–∞–π, –∫–æ–≥–æ —è –≤–∏–∂—É! \n'
                                      '–ú–æ–π —Å–ª–∞–¥–∫–∏–π –ø–∏—Ä–æ–∂–æ–∫ –∑–∞—Ö–æ—Ç–µ–ª –ø–æ–∑–Ω–∞—Ç—å –∏—Å–∫—É—Å—Å—Ç–≤–æ'
                                      ' –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —à–∞—à–ª—ã–∫–∞? –î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º, —Å–º–æ–∂–µ—à—å –ª–∏ —Ç—ã —Å–æ–∑–¥–∞—Ç—å —Ç–∞–∫–æ–π'
                                      ' —à–µ–¥–µ–≤—Ä, –ø–æ–µ–¥–∞—è –∫–æ—Ç–æ—Ä—ã–π –≥–æ—Å—Ç–∏ –Ω–µ –∑–∞–º–µ—Ç—è—Ç, —á—Ç–æ —Å—ä–µ–ª–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å—ã)',
                     reply_markup=mupcup)


def shashlik(message, k):
    mupcup = types.InlineKeyboardMarkup()
    mupcup.add(types.InlineKeyboardButton('–ö–æ–Ω–µ—á–Ω–æ, –ê—à–æ—Ç–∏–∫', callback_data='forward'))
    mupcup.add(types.InlineKeyboardButton('–ö –Ω–∞—á–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é', callback_data='return no message'))
    if k == 0:
        bot.send_message(message.chat.id, '–†–∞–¥–∏ —Ç–∞–∫–∏—Ö —Å–º–µ–ª—ã—Ö –ª—é–¥–µ–π —Å–±—Ä–∏–ª –±—ã –±–æ—Ä–æ–¥—É!')
        bot.send_poll(message.chat.id, '–ù–∞—á–Ω—É —Å –ø—Ä–æ—Å—Ç–æ–≥–æ: –∏–∑ –∫–∞–∫–æ–≥–æ –º—è—Å–∞ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ –¥–µ–ª–∞–µ—Ç—Å—è —à–∞—à–ª—ã–∫?',
                      ['–°–≤–∏–Ω–∏–Ω–∞', '–ì–æ–≤—è–¥–∏–Ω–∞', '–ö—É—Ä–∏—Ü–∞', '–ë–∞—Ä–∞–Ω–∏–Ω–∞'], None, 'quiz', None, 3,
                      '–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π —à–∞—à–ª—ã–∫ ‚Äî —ç—Ç–æ –µ–¥–∞ –∫–æ—á–µ–≤–Ω–∏–∫–æ–≤ –ê–∑–∏–∏. –û–Ω –∏–∑–≥–æ—Ç–∞–≤–ª–∏–≤–∞–ª—Å—è –∏–∑ –±–∞—Ä–∞–Ω–∏–Ω—ã,'
                      ' –∫–æ—Ç–æ—Ä–∞—è –∂–∞—Ä–∏–ª–∞—Å—å –Ω–∞ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏—Ö –∏–ª–∏ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã—Ö –ø—Ä—É—Ç—å—è—Ö –Ω–∞–¥ –æ–≥–Ω–µ–º')

        bot.send_message(message.chat.id, '–ù—É —á—Ç–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∑–Ω–∞–≤–∞—Ç—å –∞–∑—ã –≥–æ—Ç–æ–≤–∫–∏?', reply_markup=mupcup)
    elif k == 1:
        bot.send_poll(message.chat.id,
                      '–£ —Ö–æ—Ä–æ—à–µ–≥–æ —Ö–æ–∑—è–∏–Ω–∞ —à–∞—à–ª—ã–∫–∞ —Ö–≤–∞—Ç–∞–µ—Ç –≤—Å–µ–≥–¥–∞ –∏ –Ω–∞ –≤—Å–µ—Ö! –ü–æ —Å–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞'
                      ' –ø—Ä–∏–Ω—è—Ç–æ –ø–æ–∫—É–ø–∞—Ç—å –º—è—Å–∞?',
                      ['100-200 –≥—Ä–∞–º–º', '200-300 –≥—Ä–∞–º–º', '300-400 –≥—Ä–∞–º–º'], None, 'quiz', None, 2,
                      '–ú—è—Å–æ –æ–±—ã—á–Ω–æ –±–µ—Ä—É—Ç –∏–∑ —Ä–∞—Å—á–µ—Ç–∞ 300-400 –≥ –Ω–∞ –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä—è—á–æ –ª—é–±–∏–º–æ–≥–æ –≥–æ—Å—Ç—è'
                      '. –ë–æ–ª—å—à–µ ‚Äì –º–æ–∂–Ω–æ, –º–µ–Ω—å—à–µ ‚Äì –Ω–µ —Å—Ç–æ–∏—Ç\n'
                      '–í –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Ç–µ—Ä—è–µ—Ç –≤ –≤–µ—Å–µ')
        bot.send_message(message.chat.id, '–ë—ã–ª –±—ã —Ç—ã –≤–æ—Ä–æ–±—å—ë–º, —Ç–µ–±—è –±—ã –∑–≤–∞–ª–∏ –û—Ä—ë–ª! –ò–¥—ë–º –¥–∞–ª—å—à–µ?', reply_markup=mupcup)
    elif k == 2:
        bot.send_poll(message.chat.id, '–£—Ç–æ—á–Ω–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã: '
                                       '–∫–∞–∫–∏–µ —à–∞–º–ø—É—Ä—ã –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è "—à–∞—à–ª—ã—á–Ω–æ–≥–æ" –º—è—Å–∞?',
                      ['–ü–ª–æ—Å–∫–∏–µ', '–£–≥–ª–æ–≤—ã–µ'], None, 'quiz', None, 0,
                      '–ü–õ–û–°–ö–ò–ï —à–∞–º–ø—É—Ä—ã - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ: –ø–æ–¥–æ–π–¥—É—Ç –∏ –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –ª—é–ª—è –∫–µ–±–∞–±(–æ–Ω –Ω–µ —Å–ø–æ–ª–∑–µ—Ç –∏'
                      ' –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ –¥–µ—Ä–∂–∞—Ç—å—Å—è, –±–æ–ª—å—à–∏—Ö –∫—É—Å–∫–æ–≤ –º—è—Å–∞\n'
                      '–£–ì–õ–û–í–´–ï –ø–æ–¥–æ–π–¥—É—Ç –¥–ª—è –∂–∞—Ä–∫–∏ –≥—Ä–∏–±–æ–≤ –∏ –Ω–µ–±–æ–ª—å—à–∏—Ö –∫—É—Å–∫–æ–≤ –º—è—Å–∞')
        bot.send_message(message.chat.id, '–ü–æ–π–¥—É –ø–æ–∫–∞–∂—É —Å–≤–æ–µ–π –º–∞–º–µ, –∫–∞–∫–æ–π –≤–æ–ª–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–æ–π —Ç–µ—Å—Ç. –í–ø–µ—Ä—ë–¥?',
                         reply_markup=mupcup)
    elif k == 3:
        bot.send_poll(message.chat.id, '–®–∞–º–ø—É—Ä—ã –ø–æ–º—ã—Ç—ã, –º—è—Å–æ –∫—É–ø–ª–µ–Ω–æ. –ö–∞–∫ —Å–ª–µ–¥—É–µ—Ç –µ–≥–æ –Ω–∞—Ä–µ–∑–∞—Ç—å?',
                      ['–í–¥–æ–ª—å –º—ã—à–µ—á–Ω—ã—Ö –≤–æ–ª–æ–∫–æ–Ω', '–ü–æ–ø–µ—Ä—ë–∫ –º—ã—à–µ—á–Ω—ã—Ö –≤–æ–ª–æ–∫–æ–Ω'], None, 'quiz', None, 1,
                      ' –î–µ–ª–∞—è —ç—Ç–æ –ø–æ–ø–µ—Ä—ë–∫ –≤–æ–ª–æ–∫–æ–Ω, –∞ –Ω–µ –≤–¥–æ–ª—å, —Ç—ã —É–∫–æ—Ä–∞—á–∏–≤–∞–µ—à—å –∏—Ö, –º–æ–π –∑–æ–ª–æ—Ç–æ–π.'
                      ' –ú—è—Å–æ —Å—Ç–∞–Ω–µ—Ç –º—è–≥—á–µ, –µ–≥–æ –±—É–¥–µ—Ç –ª–µ–≥–∫–æ –ø—Ä–æ–∂–µ–≤–∞—Ç—å.')

        bot.send_message(message.chat.id, '–í–∞–π—è, –∫–∞–∫–æ–µ —Ä–≤–µ–Ω–∏–µ –∫ –ø–æ–±–µ–¥–µ! –ó–∞–≤–æ–¥–∏–º –º–æ—é –Ω–∏–≤—É –∏ –µ–¥–µ–º –¥–∞–ª—å—à–µ?',
                         reply_markup=mupcup)
    elif k == 4:
        bot.send_poll(message.chat.id, '–≠—Ç–∞–ø –º–∞—Ä–∏–Ω–æ–≤–∫–∏. –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞?',
                      ['–î–∞ –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É', '1-2 —á–∞—Å–∞', '3-5 —á–∞—Å–æ–≤', '10-12 —á–∞—Å–æ–≤'], None, 'quiz', None, 3,
                      '–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª - –∞—Ä–º—è–Ω–µ —Å—á–∏—Ç–∞—é—Ç, —á—Ç–æ —Ç—ã –ª—É—á—à–∏–π –Ω–∞ —Å–≤–µ—Ç–µ')

        bot.send_message(message.chat.id, '–ï—â—ë —á—É—Ç—å —á—É—Ç—å –∏ —è –Ω–∞–π–º—É —Ç–µ–±—è –Ω–∞ —Ä–∞–±–æ—Ç—É! –ì–æ—Ç–æ–≤?',
                         reply_markup=mupcup)
    elif k == 5:
        bot.send_poll(message.chat.id, '–° —É–≥–ª—ë–º –≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ, –Ω–æ –∞ –µ—Å–ª–∏ –¥—Ä–æ–≤–∞? –ö–∞–∫–∏–µ –ø–æ—Ä–æ–¥—ã –¥–µ—Ä–µ–≤–∞ –Ω–µ –¥–æ—Å—Ç–æ–π–Ω—ã'
                                       ' —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–∏ —à–∞—à–ª—ã–∫–∞?',
                      ['–î—É–±, –ª–∏–ø–∞, –±–µ—Ä—ë–∑–∞', '–ï–ª—å, —Å–æ—Å–Ω–∞, –ø–∏—Ö—Ç–∞', '–í–∏—à–Ω—è, –≥—Ä—É—à–∞, —Å–ª–∏–≤–∞'], None, 'quiz', None, 1,
                      ' –ù–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ –Ω–µ–ª—å–∑—è –±—Ä–∞—Ç—å —Å–º–æ–ª–∏—Å—Ç—ã–µ (—Ö–≤–æ–π–Ω—ã–µ) –ø–æ—Ä–æ–¥—ã –¥–µ—Ä–µ–≤–∞ –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —à–∞—à–ª—ã–∫–∞.'
                      ' –°–º–æ–ª—ã –∏—Å–ø–æ—Ä—Ç—è—Ç –º—è—Å–æ: –ø—Ä–∏–¥–∞–¥—É—Ç –µ–º—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–π –ø—Ä–∏–≤–∫—É—Å –∏ –∞—Ä–æ–º–∞—Ç.')

        bot.send_message(message.chat.id, '–ö–∞–∫ –∂–µ —Ç—ã —Å–º–∞—á–Ω–æ –æ—Ç–≤–µ—á–∞–µ—à—å, –¥–∞–≤–∞–π –µ—â—ë!',
                         reply_markup=mupcup)
    elif k == 6:
        bot.send_poll(message.chat.id, '–î—Ä–æ–≤–∞ –≥–æ—Ä—è—Ç, –Ω–∞—Å—Ç–∞–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ö–æ–≥–¥–∞ –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å '
                                       '–∂–∞—Ä–∏—Ç—å?',
                      ['–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–¥–æ–∂–≥–ª–∏ –¥—Ä–æ–≤–∞', '–ö–æ–≥–¥–∞ –¥—Ä–æ–≤–∞ –ø–æ—á—Ç–∏ –ø—Ä–æ–≥–æ—Ä–µ–ª–∏', '–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø—Ä–æ–≥–æ—Ä–µ–ª–∏ –¥—Ä–æ–≤–∞'],
                      None, 'quiz', None, 2, '–ù–∞—Å—Ç–æ—è—â–∏–π —Å–æ—á–Ω—ã–π —à–∞—à–ª—ã–∫ –∂–∞—Ä–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —É–≥–ª—è—Ö, —Ç–æ –µ—Å—Ç—å'
                                             '–ø—Ä–æ–≥–æ—Ä–µ–≤—à–∏—Ö –¥—Ä–æ–≤–∞—Ö. –û–≥–æ–Ω—å –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è, –∞ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –æ—Ç —à–∞—à–ª—ã–∫–∞ –≤–µ—á–Ω—ã!')

        bot.send_message(message.chat.id, '–ú–æ—è —Å–µ–º—å—è –∂–¥—ë—Ç —Ç–µ–±—è –≤ –≥–æ—Å—Ç–∏! –ó–∞–∫–∞–Ω—á–∏–≤–∞–π –æ–±—É—á–µ–Ω–∏–µ –∏ –±–µ–≥–∏!',
                         reply_markup=mupcup)
    elif k == 7:
        bot.send_poll(message.chat.id, '–†–∞–∑—Ä–µ–∑–∞–µ–º –∫—É—Å–æ–∫ –º—è—Å–∞, –Ω–∞–¥–∞–≤–ª–∏–≤–∞–µ–º (–Ω–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏) '
                                       '–∏ —Å–º–æ—Ç—Ä–∏–º –Ω–∞ –≤—ã–¥–µ–ª–∏–≤—à–∏–π—Å—è —Å–æ–∫. –ö–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É –≥–æ—Ç–æ–≤–æ–≥–æ —à–∞—à–ª—ã–∫–∞?'
                                       ' ',
                      ['–ù–∏–∫–∞–∫–æ–≥–æ, –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º', '–ö—Ä–∞—Å–Ω–æ–≥–æ', '–ñ—ë–ª—Ç–æ–≥–æ'],
                      None, 'quiz', None, 0, '–í –º—è—Å–Ω–æ–º —Å–æ–∫–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–æ–≤–∏, –∞ –∂—ë–ª—Ç–æ–≥–æ —Ü–≤–µ—Ç–∞ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –±—ã—Ç—å'
                                             '—Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç–∞–º –Ω–∞ –ø–æ–ª—è–Ω–µ —à–∞—à–ª—ã—á–Ω–∏–∫–æ–≤!')
        bot.send_message(message.chat.id, '–ú–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é, –∫–Ω–æ–ø–∫–∏ —É–∂–µ –Ω–∞–≥–æ—Ç–æ–≤–µ!', reply_markup=back_menu(message))


def back_menu(message):
    marcup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    marcup.add(types.KeyboardButton('–í –≥–æ—Å—Ç—è—Ö —É –ë–∞–±—ã –ù—é—Ä—ã'))
    marcup.add(types.KeyboardButton('–í —à–∞—à–ª—ã—á–Ω–æ–π —É –ê—à–æ—Ç–∞'))
    marcup.add(types.KeyboardButton('–ò–≥—Ä—ã –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ'))
    bot.send_message(message.chat.id, '–≠—Ç–æ –∫–æ–Ω–µ—Ü, –º–æ—è –º–∞–∫–æ–≤–∞—è —Ä–æ—Å–∏–Ω–∫–∞! –î–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ –º–æ–µ–π —à–∞—à–ª—ã—á–Ω–æ–π, –ø—É—Å—Ç—å –≤—Å–µ —Ç–≤–æ–∏ '
                                          '—à–∞—à–ª—ã–∫–∏ –±—É–¥—É—Ç –≤–∫—É—Å–Ω–µ–µ, —á–µ–º —É —Å–æ—Å–µ–¥–µ–π!', reply_markup=marcup)
    # GAMES


def games(message):
    mupcup = types.InlineKeyboardMarkup()
    mupcup.add(types.InlineKeyboardButton('2 —á–µ–ª–æ–≤–µ–∫–∞', callback_data='two'))
    mupcup.add(types.InlineKeyboardButton('3-6 —á–µ–ª–æ–≤–µ–∫', callback_data='three and more'))
    mupcup.add(types.InlineKeyboardButton('–ë–æ–ª—å—à–∞—è –∫–æ–º–ø–∞–Ω–∏—è', callback_data='big company'))
    mupcup.add(types.InlineKeyboardButton('–ö –Ω–∞—á–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é', callback_data='return'))
    bot.send_photo(message.chat.id, open('photoes/grigory.jpeg', 'rb'), reply_markup=types.ReplyKeyboardRemove())
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Çüëã\n'
                                      '–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ, –µ—Å–ª–∏ –¥–Ω–∏ –Ω–∞ –¥–∞—á–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –æ—á–µ–Ω—å —Å–∫—É—á–Ω–æ\n'
                                      '–í—ã–±–∏—Ä–∞–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —É–∑–Ω–∞–π, —á–µ–º —Å–∫–æ—Ä–æ—Ç–∞—Ç—å –≤—Ä–µ–º—è',
                     reply_markup=mupcup)


bot.polling(none_stop=True)
