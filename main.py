import sqlite3

import telebot
from telebot import types

bot = telebot.TeleBot('7190036484:AAG1KC_QhMtZLDPopV3gW6ELKpvFlhrcvGo')
about_user = []
about_seed = []
SEEDS = {'tomatoes': '–ü–æ–º–∏–¥–æ—Ä—ã', 'cucumbers': "–û–≥—É—Ä—Ü—ã",
         'peppers': "–ë–æ–ª–≥–∞—Ä—Å–∫–∏–µ –ø–µ—Ä—Ü—ã",
         'zucchini': "–ö–∞–±–∞—á–∫–∏",
         'carrot': "–ú–æ—Ä–∫–æ–≤—å",
         'strawberry': "–ö–ª—É–±–Ω–∏–∫–∞"
         }


@bot.message_handler(commands=['start'])
def start(message):
    murcup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    murcup.add(types.KeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'))
    murcup.add(types.KeyboardButton('–í–æ–π—Ç–∏'))
    bot.send_message(message.chat.id, '–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–º–æ—â—å—é –ì–µ—Ä–∞—Å–∏–º–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –≤–æ–π—Ç–∏',
                     reply_markup=murcup)


@bot.message_handler(content_types=['text'])
def form(message):
    if message.text == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω')
        bot.register_next_step_handler(message, user_name)
    elif message.text == '–í–æ–π—Ç–∏' or message.text == '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω')
        bot.register_next_step_handler(message, check_name)


def user_name(message):
    login = message.text
    con = sqlite3.connect('bd.sql')
    cur = con.cursor()
    users = [elem[0] for elem in cur.execute('''SELECT login FROM Users''').fetchall()]
    if login not in users:
        about_user.append(login)
        bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')
        bot.register_next_step_handler(message, user_password)
    else:
        bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å(\n–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω')
        bot.register_next_step_handler(message, user_name)


def user_password(message):
    password = message.text
    con = sqlite3.connect('bd.sql')
    cur = con.cursor()
    cur.execute('''INSERT INTO Users (login, password, points) VALUES (?, ?, ?)''', (about_user[0], password, 0))
    con.commit()
    murcup = types.ReplyKeyboardMarkup()
    murcup.add(types.KeyboardButton('–£—Ä–∞üéâ'))
    bot.send_message(message.chat.id, f'–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã –≤ —Å–µ—Ç–∏\n'
                                      f'–¢–µ–ø–µ—Ä—å –ì–µ—Ä–∞—Å–∏–º –≥–æ—Ç–æ–≤ –≤–∞–º –ø–æ–º–æ—á—å!', reply_markup=murcup)
    bot.register_next_step_handler(message, help_g)


def check_name(message):
    global about_user
    login = message.text
    about_user.append(login)
    con = sqlite3.connect('bd.sql')
    cur = con.cursor()
    users = [elem[0] for elem in cur.execute('''SELECT login FROM Users''').fetchall()]
    if login in users:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')
        bot.register_next_step_handler(message, check_password)
    else:
        mupcup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='login')
        btn2 = types.InlineKeyboardButton('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑', callback_data='repeat')
        mupcup.row(btn1, btn2)
        about_user = []
        bot.send_message(message.chat.id,
                         "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ —Å–∏—Å–∏—Ç–µ–º–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –µ—â–µ —Ä–∞–∑",
                         reply_markup=mupcup)


@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    if callback.data == 'login':
        bot.send_message(callback.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω')
        bot.register_next_step_handler(callback.message, user_name)
    elif callback.data == 'repeat':
        bot.send_message(callback.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω')
        bot.register_next_step_handler(callback.message, check_name)
    else:
        con = sqlite3.connect('bd.sql')
        cur = con.cursor()
        sort_of_seed = SEEDS[callback.data]
        about_seed_temp = cur.execute('''SELECT Information FROM Seeds WHERE Name = ?''', (sort_of_seed,)).fetchone()[
            0].split('-')
        best_temp = []
        for temp in range(int(about_seed_temp[0]), int(about_seed_temp[1]) + 1):
            best_temp.append(temp)

        marcup = types.ReplyKeyboardMarkup()
        marcup.add(types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True))
        marcup.add(types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–≤–µ—Ç—ã'))

        about_seed.append(callback.data)
        about_seed.append(sort_of_seed)
        about_seed.append(best_temp)

        bot.send_message(callback.message.chat.id,
                         '–î—Ä—É–∂–æ–∫, —á—Ç–æ–±—ã –º–æ—è –ø–æ–º–æ—â—å –±—ã–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π, –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Ç–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é',
                         reply_markup=marcup)
        bot.register_next_step_handler(callback.message, help_nura)


def check_password(message):
    password = message.text
    con = sqlite3.connect('bd.sql')
    cur = con.cursor()
    info = {}
    users = [(elem[1], elem[2]) for elem in cur.execute('''SELECT * FROM Users''').fetchall()]
    for elem in users:
        info[elem[0]] = elem[1]
    if info[about_user[0]] == password:
        murcup = types.ReplyKeyboardMarkup()
        murcup.add(types.KeyboardButton('–£—Ä–∞üéâ'))
        bot.send_message(message.chat.id, f'–ú—ã –Ω–∞—à–ª–∏ –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ\n–ì–µ—Ä–∞—Å–∏–º –≥–æ—Ç–æ–≤ –≤–∞–º –ø–æ–º–æ—á—å', reply_markup=murcup)
        bot.register_next_step_handler(message, help_g)
    else:
        bot.send_message(message.chat.id, f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑')
        bot.register_next_step_handler(message, check_password)


def help_g(message):
    marcup = types.ReplyKeyboardMarkup()
    marcup.add(types.KeyboardButton('–í –≥–æ—Å—Ç—è—Ö —É –ë–∞–±—ã –ù—é—Ä—ã'))
    marcup.add(types.KeyboardButton('–í —à–∞—à–ª—ã—á–Ω–æ–π —É –ê—à–æ—Ç–∞'))
    marcup.add(types.KeyboardButton('–ò–≥—Ä—ã –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ'))
    bot.send_message(message.chat.id,
                     f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –í–∏–¥–∏—à—å –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É?\n–î–∞–≤–∞–π –æ–±—ä—è—Å–Ω—é, –æ —á—ë–º —ç—Ç–∏ —Ä–∞–∑–¥–µ–ª—ã: '
                     f'\nüå∏ ¬´–í –≥–æ—Å—Ç—è—Ö —É –ë–∞–±—ã –ù—é—Ä—ã¬ª - —Å–æ–≤–µ—Ç—ã –æ –ø–æ—Å–∞–¥–∫–∞—Ö —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä '
                     f'\nü•© ¬´–í —à–∞—à–ª—ã—á–Ω–æ–π —É –ê—à–æ—Ç–∞¬ª - –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ —à–∞—à–ª—ã–∫–µ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –≤ –ø–æ–∏—Å–∫–µ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞ '
                     f'\n‚öΩÔ∏è ¬´–ò–≥—Ä—ã –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ¬ª - –∏–¥–µ–∏ –¥–ª—è –æ—Ç–¥—ã—Ö–∞: –∫–∞–∫ –∑–∞–Ω—è—Ç—å –≤—Å—é –∫–æ–º–ø–∞–Ω–∏—é –∏ –Ω–µ –∑–∞—Å–∫—É—á–∞—Ç—å',
                     parse_mode='html', reply_markup=marcup)
    bot.register_next_step_handler(message, on_click)


def on_click(message):
    if message.text == '–í –≥–æ—Å—Ç—è—Ö —É –ë–∞–±—ã –ù—é—Ä—ã':
        start_nura(message)
    elif message.text == '–í —à–∞—à–ª—ã—á–Ω–æ–π —É –ê—à–æ—Ç–∞':
        pass
    elif message.text == '–ò–≥—Ä—ã –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ':
        pass


def start_nura(message):
    mupcup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–ü–æ–º–∏–¥–æ—Ä—ã', callback_data='tomatoes')
    btn2 = types.InlineKeyboardButton('–û–≥—É—Ä—Ü—ã', callback_data='cucumbers')
    btn3 = types.InlineKeyboardButton('–ü–µ—Ä—Ü—ã', callback_data='peppers')
    btn4 = types.InlineKeyboardButton('–ö–∞–±–∞—á–∫–∏', callback_data='zucchini')
    btn5 = types.InlineKeyboardButton('–ú–æ—Ä–∫–æ–≤—å', callback_data='carrot')
    btn6 = types.InlineKeyboardButton('–ö–ª—É–±–Ω–∏–∫–∞', callback_data='strawberry')
    mupcup.row(btn1, btn2)
    mupcup.row(btn3, btn4)
    mupcup.row(btn5, btn6)
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, –≤–Ω—É—á–æ–∫! \n'
                                      '–ú–µ–Ω—è –∑–æ–≤—É—Ç –ë–∞–±–∞ –ù—é—Ä–∞ –∏ —è –∑–Ω–∞—é –≤—Å–µ –æ –ø–æ–º–∏–¥–æ—Ä–∫–∞—Ö –∏ –∫–ª—É–±–Ω–∏–∫–µ!\n'
                                      '–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –º–æ—è –ø–æ–º–æ—â—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—É—é –∫—É–ª—å—Ç—É—Ä—É',
                     reply_markup=mupcup)


def help_nura(message):
    if message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–≤–µ—Ç—ã':
        bot.send_photo(message.chat.id, photo=open(f'vegetables/{about_seed[0]}.jpeg', 'rb'))
    else:
        bot.send_message(message.chat.id, message)


bot.polling(none_stop=True)
